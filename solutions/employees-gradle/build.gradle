plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.springframework.boot' version '3.1.0'
    id 'com.github.ben-manes.versions' version '0.47.0'
    id 'com.adarshr.test-logger' version '3.2.0'
    id 'jacoco'
    id 'maven-publish'
    id 'com.jfrog.artifactory' version '4.32.0'
    id 'org.sonarqube' version '4.2.1.3168'
    id 'org.owasp.dependencycheck' version '8.2.1'
}

group = 'training'

def buildNumber = findProperty('buildNumber') ?: 'unknown'
version = '1.0.0-' + buildNumber

sourceCompatibility = '17'

repositories {
    mavenCentral()
// maven {
//     url "http://localhost:8091/repository/maven-public/"
//     allowInsecureProtocol true
// }
// maven {
//     url "http://localhost:8094/artifactory/libs-release"
//     allowInsecureProtocol true
// }
}

// publishing {
//     publications {
//         bootJava(MavenPublication) {
//             artifact bootJar
//         }
//     }
//     repositories {
//         maven {
//             url = findProperty('nexusUrl') ?: 'http://localhost:8091/repository/maven-releases/'
//             credentials {
//                 username findProperty('nexusUsername') ?: 'admin'
//                 password findProperty('nexusPassword') ?: 'admin'
//             }
//             allowInsecureProtocol true
//         }
//     }
// }

publishing {
    publications {
        bootJava(MavenPublication) {
            artifact bootJar
        }
    }
}

artifactory {
    contextUrl = findProperty('artifactoryUrl') ?: 'http://localhost:8094/artifactory'

    publish {
        repository {
            repoKey = 'libs-release-local'
            username = findProperty('artifactoryUser') ?: 'admin'
            password = findProperty('artifactoryPassword') ?: 'admin11AA'
        }
        defaults {
            publications('bootJava')
        }
    }
}

sourceSets {
    integrationTest {
        java.srcDir "$projectDir/src/integration/java"
        resources.srcDir "$projectDir/src/integration/resources"
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

configurations {
    integrationTestImplementation.extendsFrom implementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.liquibase:liquibase-core'
    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    def mapstructVersion = '1.5.5.Final'
    implementation group: 'org.mapstruct', name: 'mapstruct', version: mapstructVersion
    annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: mapstructVersion
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.assertj:assertj-core'
    integrationTestImplementation 'org.springframework.boot:spring-boot-starter-test'
    integrationTestImplementation 'org.springframework.boot:spring-boot-starter-webflux'
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    systemProperty 'spring.datasource.url', findProperty('test.datasource.url') ?: 'jdbc:h2:mem:db;DB_CLOSE_DELAY=-1'
    systemProperty 'spring.datasource.username', findProperty('test.datasource.username') ?: 'su'
    systemProperty 'spring.datasource.password', findProperty('test.datasource.password') ?: 'su'

    useJUnitPlatform()

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test
    finalizedBy jacocoTestReport
}

check.dependsOn integrationTest

tasks.named('test') {
    useJUnitPlatform()
    filter {
        includeTestsMatching '*Test'
    }
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = '0.8.8'
}

jacocoTestReport {

    getExecutionData().setFrom(fileTree(buildDir).include('/jacoco/*.exec'))

    reports {
        xml.required = true
    }
}

sonarqube {
    properties {
        properties['sonar.junit.reportPaths'] += "$buildDir/test-results/integrationTest/"
        properties['sonar.tests'] += "$projectDir/src/integration/java"
    }
}

jar {
    enabled = false
}

springBoot {
	buildInfo()
}